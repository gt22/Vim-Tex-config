global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
    synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
    try:
        first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
        return first != ignore
    except StopIteration:
        return False
endglobal

snippet def "definition" bA
\\begin{definition}
	$0
\\end{definition}
endsnippet

snippet thm "theorem" bA
\\begin{theorem}[$1]
	$0
\\end{theorem}
endsnippet

snippet dlemma "Definition lemma" bA
\\begin{dlemma}
	$0
\\end{dlemma}
endsnippet

snippet tlemma "Theorem lemma" bA
\\begin{tlemma}
	$0
\\end{tlemma}
endsnippet

snippet exmp "Example" bA
\\begin{example}
	$0
\\end{example}
endsnippet

snippet prbl "Problem" bA
\\begin{problem}
	$0
\\end{problem}
endsnippet

context "math()"
snippet fall "forall" wA
\\forall{$1}\quad $0
endsnippet
context "math()"
snippet exts "exists" wA
\\exists{$1}\quad $0
endsnippet
